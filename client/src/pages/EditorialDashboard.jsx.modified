"use client"

import { useEffect, useState } from "react"
import { BookOpen, Plus, Pencil, Trash2, Save, Search, AlertCircle, ArrowUpDown } from "lucide-react"
import { useAuth } from "../context/AuthContext"

const API_URL = "http://localhost:3000/api/editorials"

export default function EditorialDashboard() {
  const { isLibrarianOrAdmin } = useAuth();
  const [editorials, setEditorials] = useState([])
  const [filteredEditorials, setFilteredEditorials] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const [showForm, setShowForm] = useState(false)
  const [form, setForm] = useState({ name: "", description: "" })
  const [editEditorial, setEditEditorial] = useState(null)
  const [formError, setFormError] = useState("")
  const [searchQuery, setSearchQuery] = useState("")
  const [sortOrder, setSortOrder] = useState("asc")
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false)
  const [editorialToDelete, setEditorialToDelete] = useState(null)
  const [activeView, setActiveView] = useState("grid")

  // ... Resto del código ...

  return (
    <div className="container mx-auto px-5 py-10">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-800 flex items-center">
            <BookOpen className="mr-3 text-blue-600" /> Gestión de Editoriales
          </h1>
          <p className="text-gray-600 mt-1">Administra las editoriales de tu catálogo de libros</p>
        </div>
        
        {isLibrarianOrAdmin() && (
          <button
            onClick={() => {
              setShowForm(true)
              setEditEditorial(null)
              setForm({ name: "", description: "" })
            }}
            className="mt-4 md:mt-0 flex items-center bg-blue-600 hover:bg-blue-700 text-white px-5 py-2 rounded-lg transition"
          >
            <Plus size={18} className="mr-2" /> Nueva Editorial
          </button>
        )}
      </div>

      {/* ... Resto del código ... */}

      {/* Grid de editoriales */}
      {activeView === "grid" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredEditorials.map((editorial) => (
            <div
              key={editorial.id || editorial.editorial_id}
              className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-5 flex flex-col"
            >
              <div className="flex justify-between items-start">
                <h3 className="text-xl font-semibold text-gray-800">{editorial.name}</h3>
                {isLibrarianOrAdmin() && (
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleEdit(editorial)}
                      className="text-blue-600 hover:text-blue-800 transition"
                      aria-label="Editar"
                    >
                      <Pencil size={18} />
                    </button>
                    <button
                      onClick={() => openDeleteConfirm(editorial)}
                      className="text-red-600 hover:text-red-800 transition"
                      aria-label="Eliminar"
                    >
                      <Trash2 size={18} />
                    </button>
                  </div>
                )}
              </div>
              <p className="text-gray-600 mt-2 flex-grow">
                {editorial.description || <span className="text-gray-400 italic">Sin descripción</span>}
              </p>
              <div className="mt-4 pt-2 border-t border-gray-100 text-sm text-gray-500 flex items-center">
                <BookOpen size={16} className="mr-2" /> {editorial.book_count || 0} libros publicados
              </div>
            </div>
          ))}
        </div>
      )}

      {/* ... Resto del código ... */}
    </div>
  )
}
